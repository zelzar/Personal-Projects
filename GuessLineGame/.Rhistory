ratings_matrix <- as(numeric_data, "realRatingMatrix")
# Add item and user IDs
rownames(ratings_matrix) <- spotify_songs$id
# Assuming you have a song_id for which you want recommendations
song_id <- "1"
# Get similar items (songs) to the selected song using Cosine similarity
similar_items_cosine <- predict(recommender_model_cosine, ratings_matrix[row_id = song_id, ], n = 5)
# Assuming your dataset is loaded into a variable called 'spotify_songs'
# Assuming you have the recommenderlab package installed, if not, install it using install.packages("recommenderlab")
library(recommenderlab)
# Add a new column 'id' with unique numeric identifiers for each track_id
spotify_songs <- spotify_songs %>%
mutate(id = as.character(row_number()))
# Selecting only the relevant double variables
numeric_data <- spotify_songs[, c('id','danceability', 'energy', 'key', 'loudness', 'mode', 'speechiness', 'acousticness', 'instrumentalness', 'liveness', 'valence', 'tempo', 'duration_ms')]
# Create a realRatingMatrix
ratings_matrix <- as(numeric_data, "realRatingMatrix")
# Add item and user IDs
rownames(ratings_matrix) <- spotify_songs$id
# Assuming you have a song_id for which you want recommendations
song_id <- "1"
# Get similar items (songs) to the selected song using Cosine similarity
similar_items_cosine <- predict(recommender_model_cosine, ratings_matrix[row_id = song_id, ], n = 5)
# Assuming your dataset is loaded into a variable called 'spotify_songs'
# Assuming you have the recommenderlab package installed, if not, install it using install.packages("recommenderlab")
library(recommenderlab)
# Add a new column 'id' with unique numeric identifiers for each track_id
spotify_songs <- spotify_songs %>%
mutate(id = as.character(row_number()))
# Selecting only the relevant double variables
numeric_data <- spotify_songs[, c('id','danceability', 'energy', 'key', 'loudness', 'mode', 'speechiness', 'acousticness', 'instrumentalness', 'liveness', 'valence', 'tempo', 'duration_ms')]
# Create a realRatingMatrix
ratings_matrix <- as(numeric_data, "realRatingMatrix")
# Replace 'NA' values with 0 in the matrix
ratings_matrix[is.na(ratings_matrix)] <- 0
# Assuming your dataset is loaded into a variable called 'spotify_songs'
# Assuming you have the recommenderlab package installed, if not, install it using install.packages("recommenderlab")
library(recommenderlab)
# Add a new column 'id' with unique numeric identifiers for each track_id
spotify_songs <- spotify_songs %>%
mutate(id = as.character(row_number()))
# Selecting only the relevant double variables
numeric_data <- spotify_songs[, c('id','danceability', 'energy', 'key', 'loudness', 'mode', 'speechiness', 'acousticness', 'instrumentalness', 'liveness', 'valence', 'tempo', 'duration_ms')]
# Create a realRatingMatrix
ratings_matrix <- as(numeric_data, "realRatingMatrix")
# Add item and user IDs
colnames(ratings_matrix) <- spotify_songs$id
# Descriptive Statistics
audio_features_stats <- spotify_songs %>%
summarise(across(starts_with("danceability"), list(mean = mean, median = median, sd = sd)))
# Descriptive Statistics
audio_features_stats <- spotify_songs %>%
summarise(across(starts_with("danceability"), list(mean = mean, median = median, sd = sd)))
# Split data into Training & Testing Sets
set.seed(123)
split <- sample(c(TRUE, FALSE), nrow(content_matrix), replace = TRUE, prob = c(0.8, 0.2))
# Descriptive Statistics
audio_features_stats <- spotify_songs %>%
summarise(across(starts_with("danceability"), list(mean = mean, median = median, sd = sd)))
# Display Descriptive Statistics
print("Descriptive Statistics for Audio Features:")
print(audio_features_stats)
# Descriptive Statistics
audio_features_stats <- spotify_songs %>%
summarise(across(starts_with("danceability"), list(mean = mean, median = median, sd = sd)))
# Display Descriptive Statistics
cat("Descriptive Statistics for Danceability:\n")
cat(paste("Mean:", audio_features_stats$danceability_mean, "\n"))
cat(paste("Median:", audio_features_stats$danceability_median, "\n"))
cat(paste("Standard Deviation:", audio_features_stats$danceability_sd, "\n"))
## Preprocess the data
song_ratings <- as(spotify_songs[, c("track_id", "track_name", "track_artist")], "realRatingMatrix")
# Preprocess the data
song_popularity <- sparseMatrix(
i = as.integer(spotify_songs$user_id),
j = as.integer(spotify_songs$track_id),
x = as.numeric(spotify_songs$track_popularity),  # Use popularity as a proxy for rating
dimnames = list(unique(spotify_songs$user_id), unique(spotify_songs$track_id))
)
# Preprocess the data
spotify_songs <- spotify_songs[complete.cases(spotify_songs$user_id, spotify_songs$track_id), ]
song_popularity <- sparseMatrix(
i = as.integer(spotify_songs$user_id),
j = as.integer(spotify_songs$track_id),
x = as.numeric(spotify_songs$track_popularity),  # Use popularity as a proxy for rating
dimnames = list(unique(spotify_songs$user_id), unique(spotify_songs$track_id))
)
song_features <- spotify_songs[, c("danceability", "energy", "key", "loudness", "mode", "speechiness", "acousticness", "instrumentalness", "liveness", "valence", "tempo")]
similarity_matrix <- proxy::proxy(data = song_features, dist = proxy::cosine)
# Assuming your dataset is named 'spotify_songs'
# Replace 'track_id', 'track_name', 'track_artist', and other column names with the actual names in your dataset
# Function to calculate cosine similarity
cosine_similarity <- function(x, y) {
sum(x * y) / (sqrt(sum(x^2)) * sqrt(sum(y^2)))
}
# Function to get similar songs
get_similar_songs <- function(song_id, n = 5) {
song_features <- spotify_songs[, c("danceability", "energy", "key", "loudness", "mode", "speechiness", "acousticness", "instrumentalness", "liveness", "valence", "tempo")]
# Extract features for the given song
query_features <- song_features[spotify_songs$track_id == song_id, ]
# Calculate cosine similarity
similarity_scores <- apply(song_features, 1, function(x) cosine_similarity(x, query_features))
# Get indices of most similar songs
similar_song_indices <- order(similarity_scores, decreasing = TRUE)[1:(n + 1)]
return(spotify_songs[similar_song_indices, c("track_id", "track_name", "track_artist")])
}
# Get similar songs for a specific song
song_id <- "6f807x0ima9a1j3VPbc7VN"
similar_songs <- get_similar_songs(song_id, n = 5)
# Display similar songs
print(similar_songs)
# Assuming your dataset is named 'spotify_songs'
# Replace 'track_id', 'track_name', 'track_artist', and other column names with the actual names in your dataset
# Function to calculate cosine similarity
cosine_similarity <- function(x, y) {
sum(x * y) / (sqrt(sum(x^2)) * sqrt(sum(y^2)))
}
# Function to get similar songs
get_similar_songs <- function(song_id, n = 5) {
song_features <- spotify_songs[, c("danceability", "energy", "key", "loudness", "mode", "speechiness", "acousticness", "instrumentalness", "liveness", "valence", "tempo")]
# Extract features for the given song
query_features <- song_features[spotify_songs$track_id == song_id, ]
# Calculate cosine similarity
similarity_scores <- apply(song_features, 1, function(x) cosine_similarity(x, query_features))
# Get indices of most similar songs
similar_song_indices <- order(similarity_scores, decreasing = TRUE)[1:(n + 1)]
return(spotify_songs[similar_song_indices, c("track_id", "track_name", "track_artist")])
}
# Get similar songs for a specific song
song_id <- "7fvUMiyapMsRRxr07cU8Ef"
similar_songs <- get_similar_songs(song_id, n = 5)
# Display similar songs
print(similar_songs)
# Selecting a random song for testing
set.seed(123)  # Set seed for reproducibility
random_song_index <- sample(1:nrow(spotify_songs), 1)
random_song_id <- spotify_songs$track_id[random_song_index]
# Get similar songs for the randomly selected song
similar_songs <- get_similar_songs(random_song_id, n = 5)
# Displaying similar songs for the random song
cat("Randomly Selected Song:\n")
print(spotify_songs[spotify_songs$track_id == random_song_id, c("track_name", "track_artist")])
cat("\nSimilar Songs:\n")
# Displaying information about similar songs
print(similar_songs)
# 1. Extract track IDs of similar songs
similar_song_ids <- similar_songs$track_id
# 2. Merge with spotify_songs to get genres
genres_data <- spotify_songs[spotify_songs$track_id %in% similar_song_ids, c("track_id", "playlist_genre")]
# 3. Plot the genre distribution
genre_distribution_plot <- ggplot(genres_data, aes(x = playlist_genre, fill = playlist_genre)) +
geom_bar(stat = "count", show.legend = FALSE) +
labs(title = "Genre Distribution of Recommended Songs",
x = "Genre",
y = "Count") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(hjust = 0.5, size = 18),
axis.title = element_text(size = 14),
axis.text = element_text(size = 12),
legend.position = "none")
# Display the plot
print(genre_distribution_plot)
# 1. Extract track IDs of similar songs
similar_song_ids <- similar_songs$track_id
# 2. Merge with spotify_songs to get genres
genres_data <- spotify_songs[spotify_songs$track_id %in% similar_song_ids, c("track_id", "playlist_genre")]
# 3. Plot the genre distribution as a pie chart
genre_distribution_pie_chart <- ggplot(genres_data, aes(x = "", fill = playlist_genre)) +
geom_bar(width = 1, stat = "count", show.legend = FALSE) +
coord_polar(theta = "y") +
labs(title = "Genre Distribution of Recommended Songs",
fill = "Genre") +
theme_minimal() +
theme(axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.title = element_text(hjust = 0.5, size = 18))
# Display the pie chart
print(genre_distribution_pie_chart)
# 1. Extract track IDs of similar songs
similar_song_ids <- similar_songs$track_id
# 2. Merge with spotify_songs to get genres
genres_data <- spotify_songs[spotify_songs$track_id %in% similar_song_ids, c("track_id", "playlist_genre")]
# 3. Plot the genre distribution as a pie chart
# 3. Plot the genre distribution as a pie chart with legends
genre_distribution_pie_chart <- ggplot(genres_data, aes(x = "", fill = playlist_genre)) +
geom_bar(width = 1, stat = "count") +
coord_polar(theta = "y") +
labs(title = "Genre Distribution of Recommended Songs",
fill = "Genre") +
theme_minimal() +
theme(axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.title = element_text(hjust = 0.5, size = 18)) +
scale_fill_discrete(name = "Genre")
# Display the pie chart with legends
print(genre_distribution_pie_chart)
# Selecting a random song for testing
set.seed(1)
random_song_index <- sample(1:nrow(spotify_songs), 1)
random_song_id <- spotify_songs$track_id[random_song_index]
# Get similar songs for the randomly selected song
similar_songs <- get_similar_songs(random_song_id, n = 5)
# Displaying similar songs for the random song
cat("Randomly Selected Song:\n")
print(spotify_songs[spotify_songs$track_id == random_song_id, c("track_name", "track_artist")])
cat("\nSimilar Songs:\n")
# Displaying information about similar songs
print(similar_songs)
# Selecting a random song for testing
set.seed(4)
random_song_index <- sample(1:nrow(spotify_songs), 1)
random_song_id <- spotify_songs$track_id[random_song_index]
# Get similar songs for the randomly selected song
similar_songs <- get_similar_songs(random_song_id, n = 5)
# Displaying similar songs for the random song
cat("Randomly Selected Song:\n")
print(spotify_songs[spotify_songs$track_id == random_song_id, c("track_name", "track_artist")])
cat("\nSimilar Songs:\n")
# Displaying information about similar songs
print(similar_songs)
# 1. Extract track IDs of similar songs
similar_song_ids <- similar_songs$track_id
# 2. Merge with spotify_songs to get genres
genres_data <- spotify_songs[spotify_songs$track_id %in% similar_song_ids, c("track_id", "playlist_genre")]
# 3. Plot the genre distribution as a pie chart
# 3. Plot the genre distribution as a pie chart with legends
genre_distribution_pie_chart <- ggplot(genres_data, aes(x = "", fill = playlist_genre)) +
geom_bar(width = 1, stat = "count") +
coord_polar(theta = "y") +
labs(title = "Genre Distribution of Recommended Songs",
fill = "Genre") +
theme_minimal() +
theme(axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.title = element_text(hjust = 0.5, size = 18)) +
scale_fill_discrete(name = "Genre")
# Display the pie chart with legends
print(genre_distribution_pie_chart)
# Selecting a random song for testing
set.seed(45)
random_song_index <- sample(1:nrow(spotify_songs), 1)
random_song_id <- spotify_songs$track_id[random_song_index]
# Get similar songs for the randomly selected song
similar_songs <- get_similar_songs(random_song_id, n = 5)
# Displaying similar songs for the random song
cat("Randomly Selected Song:\n")
print(spotify_songs[spotify_songs$track_id == random_song_id, c("track_name", "track_artist")])
cat("\nSimilar Songs:\n")
# Displaying information about similar songs
print(similar_songs)
# Selecting a random song for testing
set.seed(42)
random_song_index <- sample(1:nrow(spotify_songs), 1)
random_song_id <- spotify_songs$track_id[random_song_index]
# Get similar songs for the randomly selected song
similar_songs <- get_similar_songs(random_song_id, n = 5)
# Displaying similar songs for the random song
cat("Randomly Selected Song:\n")
print(spotify_songs[spotify_songs$track_id == random_song_id, c("track_name", "track_artist")])
cat("\nSimilar Songs:\n")
# Displaying information about similar songs
print(similar_songs)
# 1. Extract track IDs of similar songs
similar_song_ids <- similar_songs$track_id
# 2. Merge with spotify_songs to get genres
genres_data <- spotify_songs[spotify_songs$track_id %in% similar_song_ids, c("track_id", "playlist_genre")]
# 3. Plot the genre distribution as a pie chart
# 3. Plot the genre distribution as a pie chart with legends
genre_distribution_pie_chart <- ggplot(genres_data, aes(x = "", fill = playlist_genre)) +
geom_bar(width = 1, stat = "count") +
coord_polar(theta = "y") +
labs(title = "Genre Distribution of Recommended Songs",
fill = "Genre") +
theme_minimal() +
theme(axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.title = element_text(hjust = 0.5, size = 18)) +
scale_fill_discrete(name = "Genre")
# Display the pie chart with legends
print(genre_distribution_pie_chart)
# Selecting a random song for testing
set.seed(102)
random_song_index <- sample(1:nrow(spotify_songs), 1)
random_song_id <- spotify_songs$track_id[random_song_index]
# Get similar songs for the randomly selected song
similar_songs <- get_similar_songs(random_song_id, n = 5)
# Displaying similar songs for the random song
cat("Randomly Selected Song:\n")
print(spotify_songs[spotify_songs$track_id == random_song_id, c("track_name", "track_artist")])
cat("\nSimilar Songs:\n")
# Displaying information about similar songs
print(similar_songs)
# Count the number of songs in each genre and playlist
genre_counts <- table(spotify_songs$playlist_genre)
sub_counts <- table(spotify_songs$playlist_subgenre)
# Print the genre distribution and playlist distribution:
cat("Genre Distribution:\n")
print(genre_counts)
# Create a data frame for visualization
sub_genre_data <- data.frame(SubGenre = names(sub_counts), Count = as.numeric(sub_counts))
# Pie chart for Sub Genre Distribution
sub_genre_distribution_pie_chart <- ggplot(sub_genre_data, aes(x = "", y = Count, fill = SubGenre)) +
geom_bar(stat = "identity", width = 1, color = "white") +
coord_polar(theta = "y") +
labs(title = "Sub Genre Distribution of Songs",
fill = "Sub Genre") +
theme_minimal() +
theme(axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.title = element_text(hjust = 0.5, size = 18)) +
scale_fill_discrete(name = "Sub Genre") +
theme(legend.position = "bottom")
# Display the pie chart
print(sub_genre_distribution_pie_chart)
# Selecting a random song for testing
set.seed(123)
random_song_index <- sample(1:nrow(spotify_songs), 1)
random_song_id <- spotify_songs$track_id[random_song_index]
# Get similar songs for the randomly selected song
similar_songs <- get_similar_songs(random_song_id, n = 5)
# Displaying similar songs for the random song
cat("Randomly Selected Song:\n")
print(spotify_songs[spotify_songs$track_id == random_song_id, c("track_name", "track_artist")])
cat("\nSimilar Songs:\n")
# Displaying information about similar songs
print(similar_songs)
# 1. Extract track IDs of similar songs
similar_song_ids <- similar_songs$track_id
# 2. Merge with spotify_songs to get genres
genres_data <- spotify_songs[spotify_songs$track_id %in% similar_song_ids, c("track_id", "playlist_subgenre")]
# 3. Plot the genre distribution as a pie chart
# 3. Plot the genre distribution as a pie chart with legends
genre_distribution_pie_chart <- ggplot(genres_data, aes(x = "", fill = playlist_genre)) +
geom_bar(width = 1, stat = "count") +
coord_polar(theta = "y") +
labs(title = "Genre Distribution of Recommended Songs",
fill = "Genre") +
theme_minimal() +
theme(axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.title = element_text(hjust = 0.5, size = 18)) +
scale_fill_discrete(name = "Genre")
# Display the pie chart with legends
print(genre_distribution_pie_chart)
# 1. Extract track IDs of similar songs
similar_song_ids <- similar_songs$track_id
# 2. Merge with spotify_songs to get genres
genres_data <- spotify_songs[spotify_songs$track_id %in% similar_song_ids, c("track_id", "playlist_subgenre")]
# 3. Plot the genre distribution as a pie chart
# 3. Plot the genre distribution as a pie chart with legends
genre_distribution_pie_chart <- ggplot(genres_data, aes(x = "", fill = playlist_subgenre)) +
geom_bar(width = 1, stat = "count") +
coord_polar(theta = "y") +
labs(title = "Genre Distribution of Recommended Songs",
fill = "Genre") +
theme_minimal() +
theme(axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.title = element_text(hjust = 0.5, size = 18)) +
scale_fill_discrete(name = "Genre")
# Display the pie chart with legends
print(genre_distribution_pie_chart)
# Selecting a random song for testing
set.seed(123)
random_song_index <- sample(1:nrow(spotify_songs), 1)
random_song_id <- spotify_songs$track_id[random_song_index]
# Get similar songs for the randomly selected song
similar_songs <- get_similar_songs(random_song_id, n = 5)
# Displaying similar songs for the random song
cat("Randomly Selected Song:\n")
print(spotify_songs[spotify_songs$track_id == random_song_id, c("track_name", "track_artist")])
cat("\nSimilar Songs:\n")
# Displaying information about similar songs with the first one
print(similar_songs[2:6, c("track_id", "track_name", "track_artist")])  # Displaying only the 2nd to 6th similar songs
# 1. Extract track IDs of similar songs
similar_song_ids <- similar_songs$track_id[1:6]
# 2. Merge with spotify_songs to get genres
genres_data <- spotify_songs[spotify_songs$track_id %in% similar_song_ids, c("track_id", "playlist_subgenre")]
# 3. Plot the genre distribution as a pie chart
# 3. Plot the genre distribution as a pie chart with legends
genre_distribution_pie_chart <- ggplot(genres_data, aes(x = "", fill = playlist_subgenre)) +
geom_bar(width = 1, stat = "count") +
coord_polar(theta = "y") +
labs(title = "Genre Distribution of Recommended Songs",
fill = "Genre") +
theme_minimal() +
theme(axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.title = element_text(hjust = 0.5, size = 18)) +
scale_fill_discrete(name = "Genre")
# Display the pie chart with legends
print(genre_distribution_pie_chart)
# 1. Extract track IDs of similar songs
similar_song_ids <- similar_songs$track_id[1:5]  # Select only the first 5 songs
# 2. Merge with spotify_songs to get genres
genres_data <- spotify_songs[spotify_songs$track_id %in% similar_song_ids, c("track_id", "playlist_subgenre")]
# 3. Calculate the percentage distribution
genre_counts <- table(genres_data$playlist_subgenre)
genre_percent <- prop.table(genre_counts) * 100
# 4. Plot the genre distribution as a pie chart with percentage
genre_distribution_pie_chart <- ggplot(genres_data, aes(x = "", fill = playlist_subgenre)) +
geom_bar(width = 1, stat = "count") +
coord_polar(theta = "y") +
labs(title = "Genre Distribution of Recommended Songs",
fill = "Genre",
subtitle = "Percentage Distribution") +
theme_minimal() +
theme(axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.title = element_text(hjust = 0.5, size = 18),
plot.subtitle = element_text(hjust = 0.5, size = 14)) +
scale_fill_discrete(name = "Genre") +
geom_text(aes(y = 1, label = paste0(round(genre_percent, 1), "%")),
position = position_stack(vjust = 0.5))
# Display the pie chart with percentage
print(genre_distribution_pie_chart)
# 1. Extract track IDs of similar songs
similar_song_ids <- similar_songs$track_id[1:5]  # Select only the first 5 songs
# 2. Merge with spotify_songs to get genres
genres_data <- spotify_songs[spotify_songs$track_id %in% similar_song_ids, c("track_id", "playlist_subgenre")]
# 3. Calculate the percentage distribution
genre_counts <- table(genres_data$playlist_subgenre)
genre_percent <- prop.table(genre_counts) * 100
# 4. Plot the genre distribution as a pie chart with percentage
genre_distribution_pie_chart <- ggplot(genres_data, aes(x = "", fill = playlist_subgenre)) +
geom_bar(width = 1, stat = "count") +
coord_polar(theta = "y") +
labs(title = "Genre Distribution of Recommended Songs",
fill = "Genre",
subtitle = "Percentage Distribution") +
theme_minimal() +
theme(axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.title = element_text(hjust = 0.5, size = 18),
plot.subtitle = element_text(hjust = 0.5, size = 14)) +
scale_fill_discrete(name = "Genre") +
geom_text(aes(x = 1, y = 1, label = paste0(round(genre_percent, 1), "%")),
position = position_stack(vjust = 0.5))
# Display the pie chart with percentage
print(genre_distribution_pie_chart)
# 1. Extract track IDs of similar songs
similar_song_ids <- similar_songs$track_id[1:5]  # Select only the first 5 songs
# 2. Merge with spotify_songs to get genres
genres_data <- spotify_songs[spotify_songs$track_id %in% similar_song_ids, c("track_id", "playlist_subgenre")]
# 3. Calculate the percentage distribution
genre_counts <- table(genres_data$playlist_subgenre)
genre_percent <- prop.table(genre_counts) * 100
# 4. Plot the genre distribution as a pie chart with percentage
genre_distribution_pie_chart <- ggplot(genres_data, aes(x = "", fill = playlist_subgenre)) +
geom_bar(width = 1, stat = "count") +
coord_polar(theta = "y") +
labs(title = "Genre Distribution of Recommended Songs",
fill = "Genre",
subtitle = "Percentage Distribution") +
theme_minimal() +
theme(axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.title = element_text(hjust = 0.5, size = 18),
plot.subtitle = element_text(hjust = 0.5, size = 14)) +
scale_fill_discrete(name = "Genre") +
geom_text(aes(x = 1, y = 1, label = paste0(names(genre_percent), ": ", round(genre_percent, 1), "%")),
position = position_stack(vjust = 0.5))
# Display the pie chart with percentage
print(genre_distribution_pie_chart)
# 1. Extract track IDs of similar songs
similar_song_ids <- similar_songs$track_id[1:6]
# 2. Merge with spotify_songs to get genres
genres_data <- spotify_songs[spotify_songs$track_id %in% similar_song_ids, c("track_id", "playlist_subgenre")]
# 3. Plot the genre distribution as a pie chart
# 3. Plot the genre distribution as a pie chart with legends
genre_distribution_pie_chart <- ggplot(genres_data, aes(x = "", fill = playlist_subgenre)) +
geom_bar(width = 1, stat = "count") +
coord_polar(theta = "y") +
labs(title = "Genre Distribution of Recommended Songs",
fill = "Genre") +
theme_minimal() +
theme(axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.title = element_text(hjust = 0.5, size = 18)) +
scale_fill_discrete(name = "Genre")
# Display the pie chart with legends
print(genre_distribution_pie_chart)
# Count the number of songs in each genre and playlist
genre_counts <- table(spotify_songs$playlist_genre)
sub_counts <- table(spotify_songs$playlist_subgenre)
# Print the genre distribution and playlist distribution:
cat("Genre Distribution:\n")
print(genre_counts)
sub_genre_data <- data.frame(SubGenre = names(sub_counts), Count = as.numeric(sub_counts))
# Pie chart for Sub Genre Distribution
sub_genre_distribution_pie_chart <- ggplot(sub_genre_data, aes(x = "", y = Count, fill = SubGenre)) +
geom_bar(stat = "identity", width = 1, color = "white") +
coord_polar(theta = "y") +
labs(title = "Sub Genre Distribution of Songs",
fill = "Sub Genre") +
theme_minimal() + theme(axis.text = element_blank(),axis.title = element_blank(),panel.grid = element_blank(),
plot.title = element_text(hjust = 0.5, size = 18)) +
scale_fill_discrete(name = "Sub Genre") + theme(legend.position = "bottom")
print(sub_genre_distribution_pie_chart)
